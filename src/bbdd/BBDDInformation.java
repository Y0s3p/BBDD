/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bbdd;

import java.awt.event.ItemListener;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.Arrays;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author Yosep
 */
public class BBDDInformation extends javax.swing.JFrame {

    
    
    public Connection connection;
    Statement st;
    PreparedStatement ps;
    CallableStatement cs;
    ResultSet rs;
    ResultSet rst;
    DatabaseMetaData metadata;
    ResultSetMetaData rsmetadata;
    private DefaultTableModel columna;
    private DefaultTableModel campo;
    private DefaultTableModel consulta;
    String camposAcumulados;
    
    
    public BBDDInformation(Connection connection) throws SQLException {
        
        initComponents();        
        this.connection = connection;
        columna = (DefaultTableModel) columnasTB.getModel();
        campo = (DefaultTableModel) camposTB.getModel();
        consulta = (DefaultTableModel) consultaTB.getModel();
        generarTablas();
        //generarColumnas();
    }

    private BBDDInformation() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    /**
     *
     */
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tablasCB = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        columnasTB = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        camposTB = new javax.swing.JTable();
        seleccionarBT = new javax.swing.JButton();
        borrarBT = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        columnasCB = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        operadorCB = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        valorTF = new javax.swing.JTextField();
        EjecutarTF = new javax.swing.JTextField();
        ejecutarBT = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        consultaTB = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(580, 850));

        jLabel1.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel1.setText("TABLA");

        tablasCB.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        tablasCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablasCBActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel2.setText("COLUMNA");

        jLabel3.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel3.setText("CAMPOS SELECCIONADOS");

        columnasTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Campos"
            }
        ));
        jScrollPane1.setViewportView(columnasTB);

        camposTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Campos seleccionados"
            }
        ));
        jScrollPane2.setViewportView(camposTB);

        seleccionarBT.setText(">");
        seleccionarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarBTActionPerformed(evt);
            }
        });

        borrarBT.setText("<");
        borrarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarBTActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel4.setText("FILTRAR");

        columnasCB.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        columnasCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnasCBActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel5.setText("OPERADOR");

        operadorCB.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel6.setText("VALOR");

        valorTF.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        valorTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                valorTFFocusLost(evt);
            }
        });

        ejecutarBT.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        ejecutarBT.setText("EJECUTAR");
        ejecutarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarBTActionPerformed(evt);
            }
        });

        consultaTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(consultaTB);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(columnasCB, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(operadorCB, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(99, 99, 99)
                                        .addComponent(valorTF, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(99, 99, 99)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(EjecutarTF, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ejecutarBT)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tablasCB, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(seleccionarBT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(borrarBT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(82, 82, 82)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tablasCB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(seleccionarBT, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(borrarBT, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columnasCB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operadorCB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valorTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EjecutarTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ejecutarBT))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablasCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablasCBActionPerformed
        // TODO add your handling code here:
        
        generarColumnasTB();
        
    }//GEN-LAST:event_tablasCBActionPerformed

    private void seleccionarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarBTActionPerformed
        // TODO add your handling code here:
        
        //int selectedColumn = camposTB.getSelectedColumn();
        //recogemos la fila seleccionada
        int selectedRow = columnasTB.getSelectedRow();
        
        //Si existe una fila seleccionada enonces:
        if(selectedRow>=0){
            
            String datosFila[]=new String[1];
            
            //aqui recogemos el valor de dicho valor en la fila seleccionada y columna 0
            datosFila[0]=columna.getValueAt(selectedRow, 0).toString();
            
            //añadimos este valor a la tabla
            campo.addRow(datosFila);
            //añadimos tambien el valor al combobox
            columnasCB.addItem(datosFila[0]);
            //borramos el dato que hemos traspasado
            columna.removeRow(selectedRow);
        }
        
        //campo.setValueAt(campo, selectedRow, selectedColumn);
        
        
    }//GEN-LAST:event_seleccionarBTActionPerformed

    private void valorTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorTFFocusLost
        // TODO add your handling code here:
        
        //recogemos la tabla actual seleccionada
        String tablaActual = tablasCB.getSelectedItem().toString();
        //recogemos el campo del combobox filtro actual seleccionado
        String filtroActual = columnasCB.getSelectedItem().toString();
        //recogemos el operador actualmente seleccionado
        String operadorActual = operadorCB.getSelectedItem().toString();
        //recogemos el valor añadido
        String valor = valorTF.getText().toUpperCase();
        
        //le damos al texfiled a ejecutar el siguiente valor para posteriormente ejecutarlo
        EjecutarTF.setText("SELECT " + camposSQL() + " FROM " + tablaActual + " WHERE " + filtroActual + " " + operadorActual +" '"+ valor+"' ");
    }//GEN-LAST:event_valorTFFocusLost

    public String camposSQL(){
        
        //recogemos el numero de filas que tiene la tabla con los campos que vaos a utilizar
        int rowCount = campo.getRowCount();
        //cremaos un array para posteriormente aladir los campos
        String[] camposTabla = new String[rowCount];
        //variable para añadir el valor de la tabla que iremos recorriendo
        String acumulativo;
        //varibale para comparar campos para evitar que se repitan
        String comparador;
        
        //si solo tiene una fila coge le unico valor disponible
        if(rowCount == 1){
            
            camposAcumulados = camposTB.getValueAt(0, 0).toString();
            
        }else{
            
            //hacemos un for para recorrer la tablay guardarlo en nuestro array
            for (int i = 0; i < rowCount; i++) {
        
                //cogemos el valor de cada fila
                acumulativo = camposTB.getValueAt(i, 0).toString();
                //lo guardamos en el array
                camposTabla[i] = acumulativo;                
            }
            
            //pones camposAcumulados vacio
            camposAcumulados = "";
            
            //recorremos el array y metemos los valores el la variable camposAcumulados
            for(int x = 0; x < camposTabla.length; x++){
            
                camposAcumulados = camposAcumulados + "," + camposTabla[x];
            
            }
            
            //eliminamos el primer caracter ya que al estar vacio lo primero que introduce es una coma
            camposAcumulados = camposAcumulados.substring(1,camposAcumulados.length());
            
        }

        /*String camposAcumulados = datosFila[0];
        camposAcumulados += camposAcumulados;*/
        
        return camposAcumulados;
        
    }
    
    private void borrarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarBTActionPerformed
        // TODO add your handling code here:
        
        //int selectedColumn = camposTB.getSelectedColumn();
        //guardamos en la variable la fila seleccionada
        int selectedRow = camposTB.getSelectedRow();
       
        //Si existe una fila seleccionada enonces:
        if(selectedRow>=0){
            
            String datosFila[]=new String[1];
            //aqui recogemos el valor de dicho valor en la fila seleccionada y columna 0
            datosFila[0]=campo.getValueAt(selectedRow, 0).toString();
            
            //añadimos a la otra tabla el valor recogido
            columna.addRow(datosFila);
            
            //borramos del combobox el campo que hemos devuelto a la otra tabla
            columnasCB.removeItem(datosFila[0]);
            
            //borramos la fila que acabamos de pasara a la otra tabla
            campo.removeRow(selectedRow);  
        }
        
    }//GEN-LAST:event_borrarBTActionPerformed

    private void ejecutarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarBTActionPerformed
        // TODO add your handling code here:
        
        
        try {
            String query = EjecutarTF.getText();
            st = connection.createStatement();
            rs = st.executeQuery(query);
        } catch (SQLException ex) {
            Logger.getLogger(BBDDInformation.class.getName()).log(Level.SEVERE, null, ex);
        }
        consultaTB.setModel(DbUtils.resultSetToTableModel(rs));
        
        /*String query = EjecutarTF.getText();
        String[] camposQuery = new String[campo.getRowCount()];
        
        for (int i = 0; i < campo.getRowCount(); i++) {
        
                String campos = camposTB.getValueAt(i, 0).toString();
                camposQuery[i] = campos;                
            }
        
        try {
            
            st = connection.createStatement();
            rs = st.executeQuery(query);
            
            for(int i = 0; i < camposQuery.length; i++){
                
                consulta.addColumn(camposQuery[i]);
                
            }
            
            while(rs.next()){
                
                Object [] fila = new Object[camposQuery.length];
                
                for (int i = 0; i < 3 ; i++){
                    
                    fila[i] = rs.getObject(i+1);
                }
                
                consulta.addRow(fila);
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(BBDDInformation.class.getName()).log(Level.SEVERE, null, ex);
        }*/  
    }//GEN-LAST:event_ejecutarBTActionPerformed

    private void columnasCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnasCBActionPerformed
        // TODO add your handling code here:
        
         generarOperadores();
        
    }//GEN-LAST:event_columnasCBActionPerformed

    
    
    
    public void generarTablas(){
        //eliminamos todos los items para asegurarnos posibles errores 
        tablasCB.removeAllItems();
        
        try { 
            //guardamos la metadata
            metadata = connection.getMetaData();
            //guardamos en user el nombre del esquema
            String user = metadata.getUserName().toUpperCase();
            //realizamos el resulset para conseguir las tablas de la base de datos
            rs = metadata.getTables(null,user, "%", new String[]{"TABLE"}); //  metadata.getSchemas().toString().toUpperCase()
            
            while(rs.next()){
                //rellenamos el combobox con el nombre de las tablas
                tablasCB.addItem(rs.getString("TABLE_NAME"));
                
            }
            //new String[]{"TABLE"}*/
            
            rs.close();
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
    }
    
    
    public void generarColumnasTB(){
        //eliminamos las filas de la tabla donde se muestran los campos para que no se repitan o acumulen
        columna.setRowCount(0);
        //guardamos en la variable tabla la tabla seleccionada en su correspondiente combobox
        String tabla = tablasCB.getSelectedItem().toString();
        
            try {
            //guardamos la metadata
            metadata = connection.getMetaData();
            //guardamos en user el nombre del esquema
            String user = metadata.getUserName().toUpperCase();
            //realizamos el resulset para conseguir los campos de dicha tabla
            rst = metadata.getColumns(null,user,tabla,"%"); //  metadata.getSchemas().toString().toUpperCase()
            
            while(rst.next()){
                //aqui recogemos el nombre de los campos de dicha abla
                columna.addRow(new Object[]{rst.getString("COLUMN_NAME")});               
            }
            
            
            rst.close();     
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
 
    }
    
    /*public void generarColumnasCB(){
        
        columnasCB.removeAllItems();
        
        String tabla = tablasCB.getSelectedItem().toString();

            try {
            
            metadata = connection.getMetaData();
            user = metadata.getUserName().toUpperCase();
            rs = metadata.getColumns(null,user,tabla,"%"); //  metadata.getSchemas().toString().toUpperCase()
            
            while(rs.next()){
                
                columnasCB.addItem(rs.getString("COLUMN_NAME"));
                           
            }
            //new String[]{"TABLE"}
            
            rs.close();     
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
 
    }*/
    
    
    public void generarOperadores(){
        
        //borramos todos los items del combobos donde apareceran los operadores para evitar que se repitan
        operadorCB.removeAllItems();
        
        //guardamos en la variable tabla la tabla seleccionada en su correspondiente combobox
        String tabla = tablasCB.getSelectedItem().toString();
        //guardamos en la variable columna el campo seleccionado en su correspondiente combobox(filtro)
        String columna = columnasCB.getSelectedItem().toString();

            try {
            //recogemos la metadata
            metadata = connection.getMetaData();
            //guardamos en user el nombre del esquema
            String user = metadata.getUserName().toUpperCase();
            //realizamos el resulset para conseguir el tipo de dato que estamos seleccionando el combobox del filtro
            rs = metadata.getColumns(null,user,tabla,columna); //  metadata.getSchemas().toString().toUpperCase()
            //lo recorremos
            while(rs.next()){
                
                //System.out.println(rs.getString("TYPE_NAME"));
                //si el tipo es varchar2 rellenaremos el cmbobox con los siguientes items
                if(rs.getString("TYPE_NAME").equals("VARCHAR2")){

                    operadorCB.setEnabled(true);
                    operadorCB.addItem("LIKE");
                    operadorCB.addItem("=");
                //si el tipo es number o date rellenaremos el cmbobox con los siguientes items
                }else if(rs.getString("TYPE_NAME").equals("NUMBER") || rs.getString("TYPE_NAME").equals("DATE")){

                    operadorCB.setEnabled(true);
                    operadorCB.addItem(">");
                    operadorCB.addItem("<");
                    operadorCB.addItem(">=");
                    operadorCB.addItem("<=");
                    operadorCB.addItem("=");
                
                //si no hay ningun campo dentro del combobox lo deshabilitamos    
                }else if(columnasCB.getItemCount() == 0){
                    
                    columnasCB.setEnabled(false);
                    
                }       
            }

            //new String[]{"TABLE"}
            
            rs.close();     
            
        } catch (SQLException ex) {
            Logger.getLogger(BBDDInformation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BBDDInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BBDDInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BBDDInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BBDDInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fotablasCB   /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BBDDInformation().setVisible(true);
            }
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField EjecutarTF;
    private javax.swing.JButton borrarBT;
    private javax.swing.JTable camposTB;
    private javax.swing.JComboBox<String> columnasCB;
    private javax.swing.JTable columnasTB;
    private javax.swing.JTable consultaTB;
    private javax.swing.JButton ejecutarBT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> operadorCB;
    private javax.swing.JButton seleccionarBT;
    private javax.swing.JComboBox<String> tablasCB;
    private javax.swing.JTextField valorTF;
    // End of variables declaration//GEN-END:variables

   
}
